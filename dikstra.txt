/*
██╗  ██╗ █████╗ ██████╗ ███████╗███████╗███╗   ███╗        ██╗  ██╗██╗  ██╗ █████╗ ██╗     ███████╗██████╗
██║ ██╔╝██╔══██╗██╔══██╗██╔════╝██╔════╝████╗ ████║        ██║ ██╔╝██║  ██║██╔══██╗██║     ██╔════╝██╔══██╗
█████╔╝ ███████║██████╔╝█████╗  █████╗  ██╔████╔██║        █████╔╝ ███████║███████║██║     █████╗  ██║  ██║
██╔═██╗ ██╔══██║██╔══██╗██╔══╝  ██╔══╝  ██║╚██╔╝██║        ██╔═██╗ ██╔══██║██╔══██║██║     ██╔══╝  ██║  ██║
██║  ██╗██║  ██║██║  ██║███████╗███████╗██║ ╚═╝ ██║███████╗██║  ██╗██║  ██║██║  ██║███████╗███████╗██████╔╝
╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═════╝
Believe in yourself ,( try and try and then try ), You can do it 💗
*/
#define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
#include<unordered_map>
#define endl "\n"
#define Ceil(x,y) ((x+y-1)/y)
#define clr(arr, x) memset(arr, x, sizeof arr)
#define all(v) v.begin(),v.end()
#define allr(s) s.rbegin(),s.rend()
#define rt(s) return cout<<s,0
#define watch(x) cout<<(#x)<<" = "<<x<<endl
#define sz(s)	(int)(s.size())
const int OO = 0x3f3f3f3f, mod = 1e9 + 7;
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
//x = xDegrees*3.14159265 / 180;
//ef1tn=(( (n / 2)*( (n / 2) + 1) / 2) * 2);
//of1tn=(n * (n + 1) / 2 - 2 * ((n / 2) * (n / 2 + 1) / 2));
int dx[] { 1, -1, 0, 0, 1, 1, -1, -1 };
int dy[] { 0, 0, 1, -1, 1, -1, 1, -1 };
void K_K(){
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif  !ONLINEJUDGE
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
}
ll ans[51][51];
int main(){
	K_K();
	int t;
	cin >> t;
	while (t--){
		int n, m;
		cin >> n >> m;
		vector<vector<pair<int, ll>>>gr(n + 1);
		for (int i = 0; i < m; i++){
			ll u, v, x;
			cin >> u >> v >> x;
			gr[u].push_back({ v, x });
			gr[v].push_back({ u, x });
		}
		for (int i = 1; i <= n; i++){
			vector<ll>dis(n + 1, 1e12);
			priority_queue<pair<ll, int>>pq;
			dis[i] = 0;
			pq.push({ 0, i });
			while (sz(pq)){
				int cur = pq.top().second;
				ll cost = pq.top().first *-1;
				pq.pop();
				if (dis[cur]<cost)
					continue;
				for (auto next : gr[cur]){
					if (dis[next.first] > cost + next.second){
						dis[next.first] = cost + next.second;
						pq.push({ -dis[next.first], next.first });
						ans[i][next.first] = dis[next.first];
					}
				}
			}
		}
		ll mn = OO;
		for (int i = 1; i <= n; i++){
			for (int j = i + 1; j <= n; j++){
				for (int k = j + 1; k <= n; k++){
					ll sum = 0;
					for (int cur = 1; cur <= n; cur++)
						sum += min({ ans[cur][i], ans[cur][j], ans[cur][k] });
					mn = min(mn, sum);
				}
			}
		}
		cout << mn << endl;
	}
}