/*
██╗  ██╗ █████╗ ██████╗ ███████╗███████╗███╗   ███╗        ██╗  ██╗██╗  ██╗ █████╗ ██╗     ███████╗██████╗
██║ ██╔╝██╔══██╗██╔══██╗██╔════╝██╔════╝████╗ ████║        ██║ ██╔╝██║  ██║██╔══██╗██║     ██╔════╝██╔══██╗
█████╔╝ ███████║██████╔╝█████╗  █████╗  ██╔████╔██║        █████╔╝ ███████║███████║██║     █████╗  ██║  ██║
██╔═██╗ ██╔══██║██╔══██╗██╔══╝  ██╔══╝  ██║╚██╔╝██║        ██╔═██╗ ██╔══██║██╔══██║██║     ██╔══╝  ██║  ██║
██║  ██╗██║  ██║██║  ██║███████╗███████╗██║ ╚═╝ ██║███████╗██║  ██╗██║  ██║██║  ██║███████╗███████╗██████╔╝
╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═════╝
				Believe in yourself ,( try and try and then try ), You can do it 💗
*/
#define _CRT_SECURE_NO_WARNINGS
#include<bits/stdc++.h>
#include<unordered_map>
#define endl "\n"
#define Ceil(x,y) ((x+y-1)/y)
#define clr(arr, x) memset(arr, x, sizeof arr)
#define all(v) v.begin(),v.end()
#define allr(s) s.rbegin(),s.rend()
#define rt(s) return cout<<s,0
#define watch(x) cout<<(#x)<<" = "<<x<<endl
#define sz(s)	(int)(s.size())
#define OO 0x3f3f3f3f3f3f3f3fLL
const int oo = 0x3f3f3f3f, mod = 1e9 + 7;
using namespace std;
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
//x = xDegrees*3.14159265 / 180;
//ef1tn=(( (n / 2)*( (n / 2) + 1) / 2) * 2);
//of1tn=(n * (n + 1) / 2 - 2 * ((n / 2) * (n / 2 + 1) / 2));
int dx[] { 1, -1, 0, 0, 1, 1, -1, -1 };
int dy[] { 0, 0, 1, -1, 1, -1, 1, -1 };
void K_K(){
#ifndef ONLINE_JUDGE
	freopen("in.txt", "r", stdin);
	freopen("out.txt", "w", stdout);
#endif  !ONLINEJUDGE
	ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
}
bool vis[100], inStack[100];
vector<vector<int>>gr;
vector<int>dnum;
vector<int>backEdge;
vector<int>lowlink;
stack<int>st;
vector<vector<int>>coms;
int num = 1;
void dfs(int node){
	vis[node] = 1;
	inStack[node] = 1;
	dnum[node] = lowlink[node] = num++;
	st.push(node);
	for (auto next : gr[node]){
		if (!vis[next])
			dfs(next);
		if (inStack[node])
			lowlink[node] = min(lowlink[next], lowlink[node]);
	}
	if (dnum[node] == lowlink[node]){
		vector<int>com;
		while (node != st.top()){
			com.push_back(st.top());
			inStack[st.top()] = 0;
			st.pop();
		}
		com.push_back(node);
		st.pop();
		inStack[node] = 0;
		coms.push_back(com);
	}
}
int main(){
	K_K();
	int n, m;
	cin >> n >> m;
	gr.resize(n + 1);
	//coms.resize(n + 1);
	dnum.resize(n + 1);
	lowlink.resize(n + 1);
	for (int i = 0; i < m; i++){
		int u, v;
		cin >> u >> v;
		gr[u].push_back(v);
	}
	for (int i = 1; i <= n; i++){
		if (!vis[i])
			dfs(i);
	}
	for (int i = 0; i < sz(coms); i++){
		for (int j = 0; j < sz(coms[i]); j++){
			cout << coms[i][j] << " ";
		}
		cout << endl;
	}
	//for (int i = 1; i <= n; i++){
	//	cout << i << "  " << lowlink[i] << endl;
	//}
}